// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// COMMIT
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?      @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  favoritIds      String[]     @db.ObjectId
  accounts        Account[]    
  listings        Listing[]    
  reservations    Reservation[]
}

model Account {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  userId         String    @db.ObjectId
  TYPE           String 
  Provider       String 
  refresh_token  String?   @db.String
  acces_token    String?   @db.String
  expires_at     Int?
  token_type     String?
  scope          String?
  id_token       String?   @db.String
  session_state  String?

  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([Provider, userId]) 
}

model Listing {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String
  imageSrc        String    
  createdAt       DateTime  @default(now())
  category        String
  locationValue   String
  carType         String    @db.ObjectId
  price           Int
  userId          String    @db.ObjectId 

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations    Reservation[]
}

model Reservation {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  listingId  String     @db.ObjectId
  userId     String     @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  createdAt  DateTime   @default(now())

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing    Listing    @relation(fields: [listingId], references: [id], onDelete: Cascade)
}
